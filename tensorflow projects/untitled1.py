# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TtXbmq38MUdEL06nAUK8998z2HMtliKI
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

x = np.arange(-7.3,20,3)
len(x)

y = x + 10

x,y

x = tf.constant(x)

y = tf.constant(y)

x,y

tf.random.set_seed(42)

model  = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(1, name='input_layer', input_shape=[1]))
model.compile(loss = tf.keras.losses.mae,
              optimizer= tf.keras.optimizers.SGD(),
              metrics = ["mae"]
              
              )
model.fit(x,y,epochs=100)

model  = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(50, name='input_layer', input_shape=[1]))
model.add(tf.keras.layers.Dense(1, name='output_layer'))
model.compile(loss = tf.keras.losses.mae,
              optimizer= tf.keras.optimizers.Adam(lr=0.01),
              metrics = ["mae"]
              
              )
model.fit(x,y,epochs=100)

model.predict([20])

x = np.arange(-100,100,4)
len(x)

y = x+10
y

plt.scatter(x,y)

x_train = x[:40]
y_train = y[:40]
x_test = x[40:]
y_test = y[40:]

plt.figure(figsize=(10,7))
plt.scatter(x_train, y_train , c='b', label="training data")
plt.scatter(x_test, y_test , c='r', label="testing data")
plt.legend()

tf.random.set_seed(42)

model = tf.keras.Sequential([tf.keras.layers.Dense(10, input_shape=[1]),tf.keras.layers.Dense(2)])

model.compile(loss=tf.keras.losses.mae,
              optimizer = tf.keras.optimizers.Adam(learning_rate=0.01),
              metrics="mae")

model.fit(x_train,y_train, epochs=100)

y_preds = model.predict(x_test)

y_preds

def plot_predictions(train_data=x_train, train_labels=y_train, test_data=x_test,test_labels=y_test, predctions=y_preds):
            plt.figure(figsize=(10,7))
            plt.scatter(train_data, train_labels , c='b', label="training data")
            plt.scatter(test_data, test_labels , c='g', label="testing data")
            plt.scatter(test_data, predctions , c='r', label="predictions data")
            plt.legend()

plot_predictions()

tf.keras.utils.plot_model(model, show_shapes=True)

model.summary()



